# -*- coding: utf-8 -*-
"""Gita Text eval.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1gLnmrHC6lLJYU-bBZGXOmpxWOcIKc1oe
"""

!pip install sentence-transformers

from sentence_transformers import SentenceTransformer,util
model = SentenceTransformer('BAAI/bge-base-en-v1.5')

import pandas as pd

df = pd.read_csv("/content/all_results.csv")

df

from collections import Counter
from itertools import chain

# Drop NaNs before splitting
valid_labels = df['predicted_labels'].dropna().astype(str).str.split(', ')
all_labels = list(chain.from_iterable(valid_labels))

Counter(all_labels).most_common()

import matplotlib.pyplot as plt

label_counts = Counter(all_labels).most_common()
labels, counts = zip(*label_counts)

plt.figure(figsize=(10, 6))
plt.bar(labels, counts)
plt.xlabel('Labels')
plt.ylabel('Frequency')
plt.title('Frequency of Predicted Labels')
plt.xticks(rotation=45, ha='right')
plt.tight_layout()
plt.show()

semantic_df

from matplotlib import pyplot as plt
semantic_df['mean_semantic_score'].plot(kind='line', figsize=(8, 4), title='mean_semantic_score')
plt.gca().spines[['top', 'right']].set_visible(False)

from matplotlib import pyplot as plt
semantic_df['mean_semantic_score'].plot(kind='hist', bins=20, title='mean_semantic_score')
plt.gca().spines[['top', 'right',]].set_visible(False)

import matplotlib.pyplot as plt
# Function to get the top emotion for semantic scores
def get_top_semantic_emotion(scores_dict):
    if scores_dict:
        return max(scores_dict, key=scores_dict.get)
    return None

# Function to get the top emotion for BART (assuming the first label is the top one)
def get_top_bart_emotion(bart_labels):
    if isinstance(bart_labels, list) and bart_labels:  # check if it's a non-empty list
        return bart_labels[0]
    return None

# Get the top semantic emotion for each row
semantic_df['top_semantic_emotion'] = semantic_df['semantic_scores'].apply(get_top_semantic_emotion)

# Get the top BART emotion for each row
# We need to apply the same logic as in the original code to get the BART labels
df['predicted_labels_list'] = df['predicted_labels'].dropna().astype(str).str.split(', ').apply(lambda x: [item.strip() for item in x if item.strip()])
df['top_bart_emotion'] = df['predicted_labels_list'].apply(get_top_bart_emotion)


# Count the occurrences of each top emotion for BART
top_bart_emotion_counts = df['top_bart_emotion'].value_counts().sort_index()

# Count the occurrences of each top emotion for Semantic
top_semantic_emotion_counts = semantic_df['top_semantic_emotion'].value_counts().sort_index()

# Create pie chart for BART top emotions
plt.figure(figsize=(14, 7))

plt.subplot(1, 2, 1) # 1 row, 2 columns, 1st plot
plt.pie(top_bart_emotion_counts, labels=top_bart_emotion_counts.index, autopct='%1.1f%%', startangle=140)
plt.title('Top Emotion Distribution (BART)')
plt.axis('equal') # Equal aspect ratio ensures that pie is drawn as a circle.

# Create pie chart for Semantic top emotions
plt.subplot(1, 2, 2) # 1 row, 2 columns, 2nd plot
plt.pie(top_semantic_emotion_counts, labels=top_semantic_emotion_counts.index, autopct='%1.1f%%', startangle=140)
plt.title('Top Emotion Distribution (Semantic)')
plt.axis('equal') # Equal aspect ratio ensures that pie is drawn as a circle.

plt.tight_layout()
plt.show()